<?xml version="1.0" encoding="utf-8"?>
<!-- asdoc\ConfirmationView.mxml -->
<!---
A modal dialog to ask the user to confirm an action. For convenience the static
method 'show' can be used to invoke this view.
-->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               width="280" height="200" close="close();"
               skinClass="org.everest.flex.ui.skins.WarningViewSkin"
               title="Please Confirm">
    <s:layout>
        <s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10"
                          paddingTop="10"/>
    </s:layout>
    <s:states>
        <s:State name="normal"/>
        <s:State name="askToProceed"/>
    </s:states>
    <fx:Script>
        <![CDATA[
            import mx.core.FlexGlobals;
            import mx.core.IFlexDisplayObject;
            import mx.managers.CursorManager;
            import mx.managers.PopUpManager;

            private var _message:String;

            [Bindable]
            private var _proceedFunction:Function;

            /**
             * Static convenience function to display this 'Yes'/'No' dialog.
             *
             * @param warningMessage the warning message to be shown
             * @param title the window title
             * @param proceedFunction a function to be called if user presses on 'yes'
             */
            public static function show(warningMessage:String, title:String, 
                                        proceedFunction:Function=null):void
            {
                var parent:DisplayObject = Sprite(FlexGlobals.topLevelApplication);
                var p:IFlexDisplayObject = 
                    PopUpManager.createPopUp(parent, ConfirmationView, true);
                ConfirmationView(p).message = warningMessage;
                ConfirmationView(p).proceedFunction = proceedFunction;
                ConfirmationView(p).title = title;
                PopUpManager.centerPopUp(p);
                parent.addEventListener(Event.REMOVED_FROM_STAGE, 
                    function(evnent:Event):void{PopUpManager.removePopUp(p)});
                CursorManager.removeBusyCursor();
            }

            public function set proceedFunction(f:Function):void
            {
                if (f != null)
                {
                    this._proceedFunction = f;
                    setCurrentState("askToProceed");
                }
            }

            //Handle the close button and Cancel button.
            public function close():void {
                PopUpManager.removePopUp(this);
            }

            [Bindable]
            public function get message():String
            {
                return _message;
            }

            public function set message(value:String):void
            {
                if (value != null)
                {
                    value = value.replace( /--/g,"\n");
                }
                _message = value;
            }


        ]]>
    </fx:Script>
    <s:Label width="100%" height="100%" minHeight="20" fontWeight="bold"
             paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
             text="{message}" verticalAlign="top"/>
    <s:HGroup>
        <s:Button excludeFrom="askToProceed" label="Close" click="close()"/>
        <s:Button includeIn="askToProceed" label="Yes"
                  click="{_proceedFunction();close()}"/>
        <s:Button includeIn="askToProceed" label="No" click="close()"/>

    </s:HGroup>
</s:TitleWindow>